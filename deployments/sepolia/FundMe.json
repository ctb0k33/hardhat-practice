{
  "address": "0xE3399B07A3a09BFAA15F146eAF42E447132C25a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1ada0875a7db9f01479e102ac24dea29e7ac5c81b54f0037088bd76d5e1b95f9",
  "receipt": {
    "to": null,
    "from": "0xF3B4C77E88998894542A5Df6Fe3FA18F167E8cE2",
    "contractAddress": "0xE3399B07A3a09BFAA15F146eAF42E447132C25a7",
    "transactionIndex": 36,
    "gasUsed": "801561",
    "logsBloom": "0x
    "blockHash": "0xf498800e907dda8dcd24f83b3c3241f30dda16164faec06399bb71e0aeb12e2a",
    "transactionHash": "0x1ada0875a7db9f01479e102ac24dea29e7ac5c81b54f0037088bd76d5e1b95f9",
    "logs": [],
    "blockNumber": 5633584,
    "cumulativeGasUsed": "13449055",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "2e231b9ac68fc34b46d6e24b3bdfa00c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Import\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\n\\n// Error\\nerror FundMe__NotOwner();\\n\\n// Library, Interface\\n\\n// Contract\\ncontract FundMe {\\n    // Type Decoration\\n    using PriceConverter for uint256;\\n\\n    // State variable\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    AggregatorV3Interface public immutable i_priceFeed;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 5 * 10 ** 18;\\n\\n    // Modifier\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Function\\n    constructor(address _priceFeed) {\\n        i_owner = msg.sender;\\n        i_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(i_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // cheaper gas cost\\n        uint256 fundersLength = s_funders.length;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < fundersLength;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address _address\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[_address];\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return i_owner;\\n    }\\n}\\n\",\"keccak256\":\"0x138f6f16aa57eab2b321eae3a6e6b0071e41a7b429889286c191e5a824fdac29\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface _priceFeed) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses\\n        (, int256 answer,,,) = _priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface _priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(_priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xc7e883e76e588338bdc6d44dc0958ffd3f127fece64c4e97d38b53f6b1234a98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610ee8380380610ee883398181016040528101906100329190610103565b3373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610130565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d0826100a5565b9050919050565b6100e0816100c5565b81146100eb57600080fd5b50565b6000815190506100fd816100d7565b92915050565b600060208284031215610119576101186100a0565b5b6000610127848285016100ee565b91505092915050565b60805160a051610d856101636000396000818161037201526105c00152600081816101b701526105e60152610d856000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461011e578063893d20e814610149578063957b895614610174578063b60d42881461019f57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107df565b6102e0565b6040516100c19190610825565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec919061086c565b610328565b6040516100fe91906108a8565b60405180910390f35b34801561011357600080fd5b5061011c610370565b005b34801561012a57600080fd5b506101336105b0565b6040516101409190610825565b60405180910390f35b34801561015557600080fd5b5061015e6105bc565b60405161016b91906108a8565b60405180910390f35b34801561018057600080fd5b506101896105e4565b6040516101969190610922565b60405180910390f35b6101a76101a9565b005b674563918244f400006101e57f00000000000000000000000000000000000000000000000000000000000000003461060890919063ffffffff16565b1015610226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021d9061099a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027491906109e9565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061033e5761033d610a1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180549050905060005b8181101561049f576000600182815481106104205761041f610a1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610402565b50600067ffffffffffffffff8111156104bb576104ba610a4c565b5b6040519080825280602002602001820160405280156104e95781602001602082028036833780820191505090505b50600190805190602001906104ff9291906106d5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052690610aac565b60006040518083038185875af1925050503d8060008114610563576040519150601f19603f3d011682016040523d82523d6000602084013e610568565b606091505b50509050806105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390610b0d565b60405180910390fd5b5050565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061061483610644565b90506000670de0b6b3a7640000858361062d9190610b2d565b6106379190610b9e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190610c5c565b5050509150506402540be400816106cd9190610cd7565b915050919050565b82805482825590600052602060002090810192821561074e579160200282015b8281111561074d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106f5565b5b50905061075b919061075f565b5090565b5b80821115610778576000816000905550600101610760565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107ac82610781565b9050919050565b6107bc816107a1565b81146107c757600080fd5b50565b6000813590506107d9816107b3565b92915050565b6000602082840312156107f5576107f461077c565b5b6000610803848285016107ca565b91505092915050565b6000819050919050565b61081f8161080c565b82525050565b600060208201905061083a6000830184610816565b92915050565b6108498161080c565b811461085457600080fd5b50565b60008135905061086681610840565b92915050565b6000602082840312156108825761088161077c565b5b600061089084828501610857565b91505092915050565b6108a2816107a1565b82525050565b60006020820190506108bd6000830184610899565b92915050565b6000819050919050565b60006108e86108e36108de84610781565b6108c3565b610781565b9050919050565b60006108fa826108cd565b9050919050565b600061090c826108ef565b9050919050565b61091c81610901565b82525050565b60006020820190506109376000830184610913565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610984601b8361093d565b915061098f8261094e565b602082019050919050565b600060208201905081810360008301526109b381610977565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f48261080c565b91506109ff8361080c565b9250828201905080821115610a1757610a166109ba565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a96600083610a7b565b9150610aa182610a86565b600082019050919050565b6000610ab782610a89565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af7600b8361093d565b9150610b0282610ac1565b602082019050919050565b60006020820190508181036000830152610b2681610aea565b9050919050565b6000610b388261080c565b9150610b438361080c565b9250828202610b518161080c565b91508282048414831517610b6857610b676109ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ba98261080c565b9150610bb48361080c565b925082610bc457610bc3610b6f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bee81610bcf565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b6000819050919050565b610c2481610c11565b8114610c2f57600080fd5b50565b600081519050610c4181610c1b565b92915050565b600081519050610c5681610840565b92915050565b600080600080600060a08688031215610c7857610c7761077c565b5b6000610c8688828901610bfc565b9550506020610c9788828901610c32565b9450506040610ca888828901610c47565b9350506060610cb988828901610c47565b9250506080610cca88828901610bfc565b9150509295509295909350565b6000610ce282610c11565b9150610ced83610c11565b9250828202610cfb81610c11565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d3357610d326109ba565b5b8282058414831517610d4857610d476109ba565b5b509291505056fea2646970667358221220f548a9e92714be2c88b679a4a2675f58bcc98b21844365aee533ca067865a0eb64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461011e578063893d20e814610149578063957b895614610174578063b60d42881461019f57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107df565b6102e0565b6040516100c19190610825565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec919061086c565b610328565b6040516100fe91906108a8565b60405180910390f35b34801561011357600080fd5b5061011c610370565b005b34801561012a57600080fd5b506101336105b0565b6040516101409190610825565b60405180910390f35b34801561015557600080fd5b5061015e6105bc565b60405161016b91906108a8565b60405180910390f35b34801561018057600080fd5b506101896105e4565b6040516101969190610922565b60405180910390f35b6101a76101a9565b005b674563918244f400006101e57f00000000000000000000000000000000000000000000000000000000000000003461060890919063ffffffff16565b1015610226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021d9061099a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027491906109e9565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061033e5761033d610a1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180549050905060005b8181101561049f576000600182815481106104205761041f610a1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610402565b50600067ffffffffffffffff8111156104bb576104ba610a4c565b5b6040519080825280602002602001820160405280156104e95781602001602082028036833780820191505090505b50600190805190602001906104ff9291906106d5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052690610aac565b60006040518083038185875af1925050503d8060008114610563576040519150601f19603f3d011682016040523d82523d6000602084013e610568565b606091505b50509050806105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390610b0d565b60405180910390fd5b5050565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061061483610644565b90506000670de0b6b3a7640000858361062d9190610b2d565b6106379190610b9e565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190610c5c565b5050509150506402540be400816106cd9190610cd7565b915050919050565b82805482825590600052602060002090810192821561074e579160200282015b8281111561074d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106f5565b5b50905061075b919061075f565b5090565b5b80821115610778576000816000905550600101610760565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107ac82610781565b9050919050565b6107bc816107a1565b81146107c757600080fd5b50565b6000813590506107d9816107b3565b92915050565b6000602082840312156107f5576107f461077c565b5b6000610803848285016107ca565b91505092915050565b6000819050919050565b61081f8161080c565b82525050565b600060208201905061083a6000830184610816565b92915050565b6108498161080c565b811461085457600080fd5b50565b60008135905061086681610840565b92915050565b6000602082840312156108825761088161077c565b5b600061089084828501610857565b91505092915050565b6108a2816107a1565b82525050565b60006020820190506108bd6000830184610899565b92915050565b6000819050919050565b60006108e86108e36108de84610781565b6108c3565b610781565b9050919050565b60006108fa826108cd565b9050919050565b600061090c826108ef565b9050919050565b61091c81610901565b82525050565b60006020820190506109376000830184610913565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610984601b8361093d565b915061098f8261094e565b602082019050919050565b600060208201905081810360008301526109b381610977565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f48261080c565b91506109ff8361080c565b9250828201905080821115610a1757610a166109ba565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a96600083610a7b565b9150610aa182610a86565b600082019050919050565b6000610ab782610a89565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af7600b8361093d565b9150610b0282610ac1565b602082019050919050565b60006020820190508181036000830152610b2681610aea565b9050919050565b6000610b388261080c565b9150610b438361080c565b9250828202610b518161080c565b91508282048414831517610b6857610b676109ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ba98261080c565b9150610bb48361080c565b925082610bc457610bc3610b6f565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bee81610bcf565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b6000819050919050565b610c2481610c11565b8114610c2f57600080fd5b50565b600081519050610c4181610c1b565b92915050565b600081519050610c5681610840565b92915050565b600080600080600060a08688031215610c7857610c7761077c565b5b6000610c8688828901610bfc565b9550506020610c9788828901610c32565b9450506040610ca888828901610c47565b9350506060610cb988828901610c47565b9250506080610cca88828901610bfc565b9150509295509295909350565b6000610ce282610c11565b9150610ced83610c11565b9250828202610cfb81610c11565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d3357610d326109ba565b5b8282058414831517610d4857610d476109ba565b5b509291505056fea2646970667358221220f548a9e92714be2c88b679a4a2675f58bcc98b21844365aee533ca067865a0eb64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 328,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}